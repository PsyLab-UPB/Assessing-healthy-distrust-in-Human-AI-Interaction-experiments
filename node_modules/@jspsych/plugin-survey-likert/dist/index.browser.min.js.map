{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"survey-likert\",\n  parameters: {\n    /** Array containing one or more objects with parameters for the question(s) that should be shown on the page. */\n    questions: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      pretty_name: \"Questions\",\n      nested: {\n        /** Question prompt. */\n        prompt: {\n          type: ParameterType.HTML_STRING,\n          pretty_name: \"Prompt\",\n          default: undefined,\n        },\n        /** Array of likert labels to display for this question. */\n        labels: {\n          type: ParameterType.STRING,\n          array: true,\n          pretty_name: \"Labels\",\n          default: undefined,\n        },\n        /** Whether or not a response to this question must be given in order to continue. */\n        required: {\n          type: ParameterType.BOOL,\n          pretty_name: \"Required\",\n          default: false,\n        },\n        /** Name of the question in the trial data. If no name is given, the questions are named Q0, Q1, etc. */\n        name: {\n          type: ParameterType.STRING,\n          pretty_name: \"Question Name\",\n          default: \"\",\n        },\n      },\n    },\n    /** If true, the order of the questions in the 'questions' array will be randomized. */\n    randomize_question_order: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Randomize Question Order\",\n      default: false,\n    },\n    /** HTML-formatted string to display at top of the page above all of the questions. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Preamble\",\n      default: null,\n    },\n    /** Width of the likert scales in pixels. */\n    scale_width: {\n      type: ParameterType.INT,\n      pretty_name: \"Scale width\",\n      default: null,\n    },\n    /** Label of the button to submit responses. */\n    button_label: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button label\",\n      default: \"Continue\",\n    },\n    /** Setting this to true will enable browser auto-complete or auto-fill for the form. */\n    autocomplete: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Allow autocomplete\",\n      default: false,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **survey-likert**\n *\n * jsPsych plugin for gathering responses to questions on a likert scale\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-survey-likert/ survey-likert plugin documentation on jspsych.org}\n */\nclass SurveyLikertPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    if (trial.scale_width !== null) {\n      var w = trial.scale_width + \"px\";\n    } else {\n      var w = \"100%\";\n    }\n\n    var html = \"\";\n    // inject CSS for trial\n    html += '<style id=\"jspsych-survey-likert-css\">';\n    html +=\n      \".jspsych-survey-likert-statement { display:block; font-size: 16px; padding-top: 40px; margin-bottom:10px; }\" +\n      \".jspsych-survey-likert-opts { list-style:none; width:\" +\n      w +\n      \"; margin:auto; padding:0 0 35px; display:block; font-size: 14px; line-height:1.1em; }\" +\n      \".jspsych-survey-likert-opt-label { line-height: 1.1em; color: #444; }\" +\n      \".jspsych-survey-likert-opts:before { content: ''; position:relative; top:11px; /*left:9.5%;*/ display:block; background-color:#efefef; height:4px; width:100%; }\" +\n      \".jspsych-survey-likert-opts:last-of-type { border-bottom: 0; }\" +\n      \".jspsych-survey-likert-opts li { display:inline-block; /*width:19%;*/ text-align:center; vertical-align: top; }\" +\n      \".jspsych-survey-likert-opts li input[type=radio] { display:block; position:relative; top:0; left:50%; margin-left:-6px; }\";\n    html += \"</style>\";\n\n    // show preamble text\n    if (trial.preamble !== null) {\n      html +=\n        '<div id=\"jspsych-survey-likert-preamble\" class=\"jspsych-survey-likert-preamble\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n\n    if (trial.autocomplete) {\n      html += '<form id=\"jspsych-survey-likert-form\">';\n    } else {\n      html += '<form id=\"jspsych-survey-likert-form\" autocomplete=\"off\">';\n    }\n\n    // add likert scale questions ///\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n    // so that the data are always associated with the same question regardless of order\n    var question_order = [];\n    for (var i = 0; i < trial.questions.length; i++) {\n      question_order.push(i);\n    }\n    if (trial.randomize_question_order) {\n      question_order = this.jsPsych.randomization.shuffle(question_order);\n    }\n\n    for (var i = 0; i < trial.questions.length; i++) {\n      var question = trial.questions[question_order[i]];\n      // add question\n      html += '<label class=\"jspsych-survey-likert-statement\">' + question.prompt + \"</label>\";\n      // add options\n      var width = 100 / question.labels.length;\n      var options_string =\n        '<ul class=\"jspsych-survey-likert-opts\" data-name=\"' +\n        question.name +\n        '\" data-radio-group=\"Q' +\n        question_order[i] +\n        '\">';\n      for (var j = 0; j < question.labels.length; j++) {\n        options_string +=\n          '<li style=\"width:' +\n          width +\n          '%\"><label class=\"jspsych-survey-likert-opt-label\"><input type=\"radio\" name=\"Q' +\n          question_order[i] +\n          '\" value=\"' +\n          j +\n          '\"';\n        if (question.required) {\n          options_string += \" required\";\n        }\n        options_string += \">\" + question.labels[j] + \"</label></li>\";\n      }\n      options_string += \"</ul>\";\n      html += options_string;\n    }\n\n    // add submit button\n    html +=\n      '<input type=\"submit\" id=\"jspsych-survey-likert-next\" class=\"jspsych-survey-likert jspsych-btn\" value=\"' +\n      trial.button_label +\n      '\"></input>';\n\n    html += \"</form>\";\n\n    display_element.innerHTML = html;\n\n    display_element.querySelector(\"#jspsych-survey-likert-form\").addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // create object to hold responses\n      var question_data = {};\n      var matches = display_element.querySelectorAll<HTMLFormElement>(\n        \"#jspsych-survey-likert-form .jspsych-survey-likert-opts\"\n      );\n      for (var index = 0; index < matches.length; index++) {\n        var id = matches[index].dataset[\"radioGroup\"];\n        var el = display_element.querySelector<HTMLInputElement>(\n          'input[name=\"' + id + '\"]:checked'\n        );\n        if (el === null) {\n          var response: string | number = \"\";\n        } else {\n          var response: string | number = parseInt(el.value);\n        }\n        var obje = {};\n        if (matches[index].attributes[\"data-name\"].value !== \"\") {\n          var name = matches[index].attributes[\"data-name\"].value;\n        } else {\n          var name = id;\n        }\n        obje[name] = response;\n        Object.assign(question_data, obje);\n      }\n\n      // save data\n      var trial_data = {\n        rt: response_time,\n        response: question_data,\n        question_order: question_order,\n      };\n\n      display_element.innerHTML = \"\";\n\n      // next trial\n      this.jsPsych.finishTrial(trial_data);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const question_data = {};\n    let rt = 1000;\n\n    for (const q of trial.questions) {\n      const name = q.name ? q.name : `Q${trial.questions.indexOf(q)}`;\n      question_data[name] = this.jsPsych.randomization.randomInt(0, q.labels.length - 1);\n      rt += this.jsPsych.randomization.sampleExGaussian(1500, 400, 1 / 200, true);\n    }\n\n    const default_data = {\n      response: question_data,\n      rt: rt,\n      question_order: trial.randomize_question_order\n        ? this.jsPsych.randomization.shuffle([...Array(trial.questions.length).keys()])\n        : [...Array(trial.questions.length).keys()],\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const answers = Object.entries(data.response);\n    for (let i = 0; i < answers.length; i++) {\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(\n          `input[type=\"radio\"][name=\"${answers[i][0]}\"][value=\"${answers[i][1]}\"]`\n        ),\n        ((data.rt - 1000) / answers.length) * (i + 1)\n      );\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-survey-likert-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default SurveyLikertPlugin;\n"],"names":["info","name","parameters","questions","type","ParameterType","COMPLEX","array","pretty_name","nested","prompt","HTML_STRING","default","undefined","labels","STRING","required","BOOL","randomize_question_order","preamble","scale_width","INT","button_label","autocomplete","SurveyLikertPlugin","jsPsych","_classCallCheck","this","display_element","trial","_this","w","html","question_order","i","length","push","randomization","shuffle","question","width","options_string","j","innerHTML","querySelector","addEventListener","e","preventDefault","endTime","performance","now","response_time","Math","round","startTime","question_data","matches","querySelectorAll","index","id","dataset","el","response","parseInt","value","obje","attributes","Object","assign","trial_data","rt","finishTrial","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","_step","_iterator","s","n","done","q","indexOf","randomInt","sampleExGaussian","err","f","default_data","_toConsumableArray","Array","keys","data","pluginAPI","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","answers","entries","clickTarget"],"mappings":"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"}